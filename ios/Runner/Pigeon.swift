// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

import Foundation
#if os(iOS)
import Flutter
#elseif os(macOS)
import FlutterMacOS
#else
#error("Unsupported platform.")
#endif



private func wrapResult(_ result: Any?) -> [Any?] {
  return [result]
}

private func wrapError(_ error: Any) -> [Any?] {
  if let flutterError = error as? FlutterError {
    return [
      flutterError.code,
      flutterError.message,
      flutterError.details
    ]
  }
  return [
    "\(error)",
    "\(type(of: error))",
    "Stacktrace: \(Thread.callStackSymbols)"
  ]
}

/// Generated class from Pigeon that represents data sent in messages.
struct Response {
  var response: String? = nil

  static func fromList(_ list: [Any]) -> Response? {
    let response = list[0] as! String?

    return Response(
      response: response
    )
  }
  func toList() -> [Any?] {
    return [
      response,
    ]
  }
}
private class PigeonApiCodecReader: FlutterStandardReader {
  override func readValue(ofType type: UInt8) -> Any? {
    switch type {
      case 128:
        return Response.fromList(self.readValue() as! [Any])
      default:
        return super.readValue(ofType: type)
    }
  }
}

private class PigeonApiCodecWriter: FlutterStandardWriter {
  override func writeValue(_ value: Any) {
    if let value = value as? Response {
      super.writeByte(128)
      super.writeValue(value.toList())
    } else {
      super.writeValue(value)
    }
  }
}

private class PigeonApiCodecReaderWriter: FlutterStandardReaderWriter {
  override func reader(with data: Data) -> FlutterStandardReader {
    return PigeonApiCodecReader(data: data)
  }

  override func writer(with data: NSMutableData) -> FlutterStandardWriter {
    return PigeonApiCodecWriter(data: data)
  }
}

class PigeonApiCodec: FlutterStandardMessageCodec {
  static let shared = PigeonApiCodec(readerWriter: PigeonApiCodecReaderWriter())
}

/// Generated protocol from Pigeon that represents a handler of messages from Flutter.
protocol PigeonApi {
  func testMessage(fromFlutter: String) throws -> Response
}

/// Generated setup class from Pigeon to handle messages through the `binaryMessenger`.
class PigeonApiSetup {
  /// The codec used by PigeonApi.
  static var codec: FlutterStandardMessageCodec { PigeonApiCodec.shared }
  /// Sets up an instance of `PigeonApi` to handle messages through the `binaryMessenger`.
  static func setUp(binaryMessenger: FlutterBinaryMessenger, api: PigeonApi?) {
    let testMessageChannel = FlutterBasicMessageChannel(name: "dev.flutter.pigeon.PigeonApi.testMessage", binaryMessenger: binaryMessenger, codec: codec)
    if let api = api {
      testMessageChannel.setMessageHandler { message, reply in
        let args = message as! [Any]
        let fromFlutterArg = args[0] as! String
        do {
          let result = try api.testMessage(fromFlutter: fromFlutterArg)
          reply(wrapResult(result))
        } catch {
          reply(wrapError(error))
        }
      }
    } else {
      testMessageChannel.setMessageHandler(nil)
    }
  }
}
