// Autogenerated from Pigeon (v9.1.2), do not edit directly.
// See also: https://pub.dev/packages/pigeon

#import "pigeon.h"
#import <Flutter/Flutter.h>

#if !__has_feature(objc_arc)
#error File requires ARC to be enabled.
#endif

static NSArray *wrapResult(id result, FlutterError *error) {
  if (error) {
    return @[
      error.code ?: [NSNull null], error.message ?: [NSNull null], error.details ?: [NSNull null]
    ];
  }
  return @[ result ?: [NSNull null] ];
}
static id GetNullableObjectAtIndex(NSArray *array, NSInteger key) {
  id result = array[key];
  return (result == [NSNull null]) ? nil : result;
}

@interface Response ()
+ (Response *)fromList:(NSArray *)list;
+ (nullable Response *)nullableFromList:(NSArray *)list;
- (NSArray *)toList;
@end

@implementation Response
+ (instancetype)makeWithResponse:(nullable NSString *)response {
  Response* pigeonResult = [[Response alloc] init];
  pigeonResult.response = response;
  return pigeonResult;
}
+ (Response *)fromList:(NSArray *)list {
  Response *pigeonResult = [[Response alloc] init];
  pigeonResult.response = GetNullableObjectAtIndex(list, 0);
  return pigeonResult;
}
+ (nullable Response *)nullableFromList:(NSArray *)list {
  return (list) ? [Response fromList:list] : nil;
}
- (NSArray *)toList {
  return @[
    (self.response ?: [NSNull null]),
  ];
}
@end

@interface PigeonApiCodecReader : FlutterStandardReader
@end
@implementation PigeonApiCodecReader
- (nullable id)readValueOfType:(UInt8)type {
  switch (type) {
    case 128: 
      return [Response fromList:[self readValue]];
    default:
      return [super readValueOfType:type];
  }
}
@end

@interface PigeonApiCodecWriter : FlutterStandardWriter
@end
@implementation PigeonApiCodecWriter
- (void)writeValue:(id)value {
  if ([value isKindOfClass:[Response class]]) {
    [self writeByte:128];
    [self writeValue:[value toList]];
  } else {
    [super writeValue:value];
  }
}
@end

@interface PigeonApiCodecReaderWriter : FlutterStandardReaderWriter
@end
@implementation PigeonApiCodecReaderWriter
- (FlutterStandardWriter *)writerWithData:(NSMutableData *)data {
  return [[PigeonApiCodecWriter alloc] initWithData:data];
}
- (FlutterStandardReader *)readerWithData:(NSData *)data {
  return [[PigeonApiCodecReader alloc] initWithData:data];
}
@end

NSObject<FlutterMessageCodec> *PigeonApiGetCodec() {
  static FlutterStandardMessageCodec *sSharedObject = nil;
  static dispatch_once_t sPred = 0;
  dispatch_once(&sPred, ^{
    PigeonApiCodecReaderWriter *readerWriter = [[PigeonApiCodecReaderWriter alloc] init];
    sSharedObject = [FlutterStandardMessageCodec codecWithReaderWriter:readerWriter];
  });
  return sSharedObject;
}

void PigeonApiSetup(id<FlutterBinaryMessenger> binaryMessenger, NSObject<PigeonApi> *api) {
  {
    FlutterBasicMessageChannel *channel =
      [[FlutterBasicMessageChannel alloc]
        initWithName:@"dev.flutter.pigeon.PigeonApi.testMessage"
        binaryMessenger:binaryMessenger
        codec:PigeonApiGetCodec()];
    if (api) {
      NSCAssert([api respondsToSelector:@selector(testMessageFromFlutter:completion:)], @"PigeonApi api (%@) doesn't respond to @selector(testMessageFromFlutter:completion:)", api);
      [channel setMessageHandler:^(id _Nullable message, FlutterReply callback) {
        NSArray *args = message;
        NSString *arg_fromFlutter = GetNullableObjectAtIndex(args, 0);
        [api testMessageFromFlutter:arg_fromFlutter completion:^(Response *_Nullable output, FlutterError *_Nullable error) {
          callback(wrapResult(output, error));
        }];
      }];
    } else {
      [channel setMessageHandler:nil];
    }
  }
}
